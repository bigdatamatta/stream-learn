.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_stream_plotting.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_plot_stream_plotting.py:


=============================
Plotting example data streams
=============================

Id sunt magna sint doctrina quo de enim ullamco, quorum proident adipisicing,
nam summis quid magna probant. O incurreret transferrem, ne anim elit do
nescius. De velit mandaremus, do ubi minim ingeniis.Amet singulis ita sunt dolor
ut quis reprehenderit incurreret veniam cupidatat. Culpa aut id amet proident
quo te te fugiat dolor quis, commodo sed ingeniis non tamen est laborum o quae.
Probant dolore occaecat senserit ea fugiat de senserit ne nulla. Laboris eram
pariatur ullamco, an export excepteur fidelissimae.



.. code-block:: default



    import matplotlib.pyplot as plt
    import numpy as np
    from matplotlib.colors import LinearSegmentedColormap

    import strlearn as sl

    cm = LinearSegmentedColormap.from_list(
        "lokomotiv", colors=[(0.3, 0.7, 0.3), (0.7, 0.3, 0.3)]
    )

    n_chunks = 100
    chunks_plotted = np.linspace(0, n_chunks - 1, 8).astype(int)


    def plot_stream(stream, filename="foo", title=""):
        fig, ax = plt.subplots(1, len(chunks_plotted), figsize=(14, 2.5))

        j = 0
        for i in range(n_chunks):
            X, y = stream.get_chunk()
            if i in chunks_plotted:
                ax[j].set_title("Chunk %i" % i)
                ax[j].scatter(X[:, 0], X[:, 1], c=y, cmap=cm, s=10, alpha=0.5)
                ax[j].set_ylim(-4, 4)
                ax[j].set_xlim(-4, 4)
                ax[j].set(aspect="equal")
                j += 1

        fig.suptitle(title, fontsize=16)
        plt.tight_layout()
        plt.savefig("%s.png" % filename, transparent=True)









Processing
#############################################################################


.. code-block:: default


    concept_kwargs = {
        "n_chunks": n_chunks,
        "chunk_size": 500,
        "n_classes": 2,
        "random_state": 106,
        "n_features": 2,
        "n_informative": 2,
        "n_redundant": 0,
        "n_repeated": 0,
    }








Stationary stream
#############################################################################

inne


.. code-block:: default


    stream = sl.streams.StreamGenerator(**concept_kwargs)

    plot_stream(stream, "stationary", "Stationary stream")




.. image:: /auto_examples/images/sphx_glr_plot_stream_plotting_001.png
    :alt: Stationary stream, Chunk 0, Chunk 14, Chunk 28, Chunk 42, Chunk 56, Chunk 70, Chunk 84, Chunk 99
    :class: sphx-glr-single-img





Sudden drift
#############################################################################

inne


.. code-block:: default


    stream = sl.streams.StreamGenerator(**concept_kwargs, n_drifts=1)

    plot_stream(stream, "sudden", "Stream with sudden drift")




.. image:: /auto_examples/images/sphx_glr_plot_stream_plotting_002.png
    :alt: Stream with sudden drift, Chunk 0, Chunk 14, Chunk 28, Chunk 42, Chunk 56, Chunk 70, Chunk 84, Chunk 99
    :class: sphx-glr-single-img





Gradual drift
#############################################################################

inne


.. code-block:: default


    stream = sl.streams.StreamGenerator(
        **concept_kwargs, n_drifts=1, concept_sigmoid_spacing=5
    )

    plot_stream(stream, "gradual", "Stream with gradual drift")




.. image:: /auto_examples/images/sphx_glr_plot_stream_plotting_003.png
    :alt: Stream with gradual drift, Chunk 0, Chunk 14, Chunk 28, Chunk 42, Chunk 56, Chunk 70, Chunk 84, Chunk 99
    :class: sphx-glr-single-img





Incremental drift
#############################################################################

inne


.. code-block:: default


    stream = sl.streams.StreamGenerator(
        **concept_kwargs, n_drifts=1, concept_sigmoid_spacing=5, incremental=True
    )

    plot_stream(stream, "incremental", "Stream with incremental drift")




.. image:: /auto_examples/images/sphx_glr_plot_stream_plotting_004.png
    :alt: Stream with incremental drift, Chunk 0, Chunk 14, Chunk 28, Chunk 42, Chunk 56, Chunk 70, Chunk 84, Chunk 99
    :class: sphx-glr-single-img





Recurrent
#############################################################################

inne


.. code-block:: default


    stream = sl.streams.StreamGenerator(**concept_kwargs, n_drifts=2, recurring=True)

    plot_stream(stream, "recurring", "Data stream with recurring drift")




.. image:: /auto_examples/images/sphx_glr_plot_stream_plotting_005.png
    :alt: Data stream with recurring drift, Chunk 0, Chunk 14, Chunk 28, Chunk 42, Chunk 56, Chunk 70, Chunk 84, Chunk 99
    :class: sphx-glr-single-img





Non-recurrent
#############################################################################

inne


.. code-block:: default


    stream = sl.streams.StreamGenerator(**concept_kwargs, n_drifts=2, recurring=False)

    plot_stream(stream, "nonrecurring", "Data stream with non-recurring drift")




.. image:: /auto_examples/images/sphx_glr_plot_stream_plotting_006.png
    :alt: Data stream with non-recurring drift, Chunk 0, Chunk 14, Chunk 28, Chunk 42, Chunk 56, Chunk 70, Chunk 84, Chunk 99
    :class: sphx-glr-single-img





Static-imbalanced
#############################################################################

inne


.. code-block:: default


    stream = sl.streams.StreamGenerator(**concept_kwargs, weights=[0.3, 0.7])

    plot_stream(stream, "static-imbalanced", "Data stream with statically imbalanced drift")





.. image:: /auto_examples/images/sphx_glr_plot_stream_plotting_007.png
    :alt: Data stream with statically imbalanced drift, Chunk 0, Chunk 14, Chunk 28, Chunk 42, Chunk 56, Chunk 70, Chunk 84, Chunk 99
    :class: sphx-glr-single-img





Dynamic-imbalanced
#############################################################################

inne


.. code-block:: default


    stream = sl.streams.StreamGenerator(**concept_kwargs, weights=(2, 5, 0.9))

    plot_stream(
        stream, "dynamic-imbalanced", "Data stream with dynamically imbalanced drift"
    )




.. image:: /auto_examples/images/sphx_glr_plot_stream_plotting_008.png
    :alt: Data stream with dynamically imbalanced drift, Chunk 0, Chunk 14, Chunk 28, Chunk 42, Chunk 56, Chunk 70, Chunk 84, Chunk 99
    :class: sphx-glr-single-img





DISCO
#############################################################################

inne


.. code-block:: default


    stream = sl.streams.StreamGenerator(
        **concept_kwargs,
        weights=(2, 5, 0.9),
        n_drifts=3,
        concept_sigmoid_spacing=5,
        recurring=True,
        incremental=True
    )

    plot_stream(
        stream, "disco", "Dynamically Imbalanced Stream with Concept Oscillation (DISCO)"
    )



.. image:: /auto_examples/images/sphx_glr_plot_stream_plotting_009.png
    :alt: Dynamically Imbalanced Stream with Concept Oscillation (DISCO), Chunk 0, Chunk 14, Chunk 28, Chunk 42, Chunk 56, Chunk 70, Chunk 84, Chunk 99
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  8.317 seconds)


.. _sphx_glr_download_auto_examples_plot_stream_plotting.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_stream_plotting.py <plot_stream_plotting.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_stream_plotting.ipynb <plot_stream_plotting.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
